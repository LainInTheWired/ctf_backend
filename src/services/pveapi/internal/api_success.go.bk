package test

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"os"

	_ "github.com/go-sql-driver/mysql"
)

// ProxmoxConfig はProxmoxへの接続設定を保持します
type ProxmoxConfig struct {
	APIURL        string
	Authorization string
}

// VMConfig は作成するVMの設定を保持します
type VMConfig struct {
	VMID           string `json:"vmid"`
	Name           string `json:"name"`
	Memory         string `json:"memory"` // MB単位
	CPUs           string `json:"cores"`
	Net0           string `json:"net0"`        // 例: "virtio=DE:AD:BE:EF:00:00,bridge=vmbr0"
	Scsi0          string `json:"scsi0"`       // 例: "kingston_1tb:vm-200-disk-0,size=16G"
	Boot           string `json:"boot"`        // 例: "c"
	Ide2           string `json:"ide2"`        // 例: "local:iso/AlmaLinux-9.3-x86_64-boot.iso"
	OSType         string `json:"ostype"`      // 例: "l26" (Linux 2.6/3.x/4.x)
	SCSIController string `json:"scsihw"`      // 例: "virtio-scsi-single"
	Description    string `json:"description"` // VMの説明（オプション）
}

// ProxmoxClient はProxmox APIとのやり取りを管理します
type ProxmoxClient struct {
	Config     ProxmoxConfig
	HTTPClient *http.Client
}

// NewProxmoxClient は新しいProxmoxClientを初期化します
func NewProxmoxClient(config ProxmoxConfig) *ProxmoxClient {
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true}, // 本番環境ではfalseに設定してください
	}
	return &ProxmoxClient{
		Config:     config,
		HTTPClient: &http.Client{Transport: tr},
	}
}

// CreateVM はProxmoxに新しいVMを作成します
func (c *ProxmoxClient) CreateVM(vm VMConfig) error {
	// VM作成のエンドポイント
	// endpoint := fmt.Sprintf("%s/api2/json/nodes/%s/qemu", c.Config.APIURL, vm.Name)

	// フォームデータの作成
	formData := url.Values{}
	formData.Set("vmid", vm.VMID)
	formData.Set("name", vm.Name)
	formData.Set("memory", vm.Memory)
	formData.Set("cores", vm.CPUs)
	formData.Set("net0", vm.Net0)
	formData.Set("scsi0", vm.Scsi0)
	formData.Set("boot", vm.Boot)
	formData.Set("ide2", vm.Ide2)
	formData.Set("ostype", vm.OSType)
	formData.Set("scsihw", vm.SCSIController)
	formData.Set("description", vm.Description)

	// 新しいPOSTリクエストの作成
	req, err := http.NewRequest("POST", c.Config.APIURL, bytes.NewBufferString(formData.Encode()))
	if err != nil {
		return fmt.Errorf("HTTPリクエストの作成に失敗: %w", err)
	}

	// ヘッダーの設定
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("Authorization", c.Config.Authorization)

	// リクエスト内容のログ出力
	log.Println("---- HTTP Request ----")
	log.Printf("Method: %s\n", req.Method)
	log.Printf("URL: %s\n", req.URL.String())
	log.Println("Headers:")
	for name, values := range req.Header {
		for _, value := range values {
			log.Printf("  %s: %s\n", name, value)
		}
	}
	log.Printf("Body: %s\n", formData.Encode())
	log.Println("----------------------")

	// リクエストの送信
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return fmt.Errorf("HTTPリクエストの送信に失敗: %w", err)
	}
	defer resp.Body.Close()

	// レスポンスの読み取り
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("レスポンスボディの読み取りに失敗: %w", err)
	}

	// レスポンスのログ出力
	log.Println("---- HTTP Response ----")
	log.Printf("Status: %s\n", resp.Status)
	log.Println("Headers:")
	for name, values := range resp.Header {
		for _, value := range values {
			log.Printf("  %s: %s\n", name, value)
		}
	}
	log.Printf("Body: %s\n", string(body))
	log.Println("-----------------------")

	// ステータスコードのチェック
	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		// 成功時の処理
		var successResponse map[string]interface{}
		if err := json.Unmarshal(body, &successResponse); err != nil {
			return fmt.Errorf("JSONレスポンスの解析に失敗: %w", err)
		}

		if data, ok := successResponse["data"].(map[string]interface{}); ok {
			vmid := data["vmid"]
			name := data["name"]
			fmt.Printf("VM '%s' (VMID: %v) の作成に成功しました。\n", name, vmid)
		} else {
			fmt.Printf("VMが作成されましたが、予期しないレスポンス形式です: %s\n", string(body))
		}
	} else {
		// 失敗時の処理
		var errorResponse map[string]interface{}
		if err := json.Unmarshal(body, &errorResponse); err != nil {
			fmt.Printf("VMの作成に失敗しました。ステータスコード: %d, レスポンス: %s\n", resp.StatusCode, string(body))
			os.Exit(1)
		}

		if errors, ok := errorResponse["errors"].(map[string]interface{}); ok {
			for key, value := range errors {
				fmt.Printf("エラー [%s]: %v\n", key, value)
			}
		} else {
			fmt.Printf("VMの作成に失敗しました。ステータスコード: %d, レスポンス: %s\n", resp.StatusCode, string(body))
		}
		os.Exit(1)
	}

	return nil
}

func main() {
	// 環境変数から設定をロード（推奨）
	config := ProxmoxConfig{
		APIURL:        getEnv("PROXMOX_API_URL", "https://10.0.10.30:8006/api2/json/nodes/PVE01/qemu"),
		Authorization: getEnv("PROXMOX_AUTHORIZATION", "PVEAPIToken=root@pam!ctf_dev=c8b15a5a-6911-4a18-98ce-99911c260ddb"),
	}

	// 設定のバリデーション
	if config.APIURL == "" || config.Authorization == "" {
		log.Fatal("必要な環境変数が設定されていません。PROXMOX_API_URL および PROXMOX_AUTHORIZATION を設定してください。")
	}

	client := NewProxmoxClient(config)

	// VMの設定を定義
	vm := VMConfig{
		VMID:           "601", // ユニークなVM ID
		Name:           "test-vm",
		Memory:         "2048", // 2GB
		CPUs:           "2",
		Net0:           "virtio=DE:AD:BE:EF:00:00,bridge=vmbr0",
		Scsi0:          "kingston_1tb:vm-601-disk-0,size=16G",
		Boot:           "c",
		Ide2:           "local:iso/AlmaLinux-9.3-x86_64-boot.iso",
		OSType:         "l26",
		SCSIController: "virtio-scsi-single",
		Description:    "Test VM created via API",
	}

	// VMの作成
	err := client.CreateVM(vm)
	if err != nil {
		log.Fatalf("VMの作成中にエラーが発生しました: %v", err)
	}
}

// encodeURLValues はマップをURLエンコードされたフォームデータに変換します
func encodeURLValues(data map[string]interface{}) []byte {
	var buffer bytes.Buffer
	for key, value := range data {
		buffer.WriteString(fmt.Sprintf("%s=%v&", key, value))
	}
	// 最後の'&'を削除
	if buffer.Len() > 0 {
		buffer.Truncate(buffer.Len() - 1)
	}
	return buffer.Bytes()
}

// getEnv は環境変数を取得し、存在しない場合はデフォルト値を返します
func getEnv(key, defaultValue string) string {
	value, exists := os.LookupEnv(key)
	if !exists {
		return defaultValue
	}
	return value
}
